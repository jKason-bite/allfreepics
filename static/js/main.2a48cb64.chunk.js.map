{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","color","position","Toolbar","IconButton","edge","aria-label","class","Typography","variant","ImageResults","state","open","currentImg","handleOpen","img","setState","handleClose","imageListContent","images","this","props","GridList","cols","map","GridListTile","key","id","src","largeImageURL","alt","tags","GridListTileBar","subtitle","user","actionIcon","onClick","Dialog","onClose","modal","DialogTitle","style","width","Component","Search","onTextChange","e","val","target","value","name","axios","get","apiUrl","apiKey","searchText","amount","then","res","data","hits","catch","err","console","log","onAmountChange","TextField","onChange","label","fullWidth","FormControl","marginTop","marginLeft","Select","MenuItem","FormHelperText","length","createMuiTheme","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a48cb64.chunk.js","sourcesContent":["import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n  \r\n\r\n\r\n\r\nfunction NavBar () {\r\n    const classes = useStyles();\r\n    return (\r\n    <div className={classes.root}>\r\n        <AppBar color=\"primary\" position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n          <i class=\"far fa-images\"></i>\r\n          </IconButton>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n           AllFreePics\r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button'; // v1.x\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n\r\n\r\n\r\nclass ImageResults extends Component {\r\n    state = {\r\n      open: false,\r\n      currentImg: ''\r\n    };\r\n  \r\n    handleOpen = img => {\r\n      this.setState({ open: true, currentImg: img });\r\n    };\r\n  \r\n    handleClose = () => {\r\n      this.setState({ open: false });\r\n    };\r\n  \r\n    render() {\r\n      let imageListContent;\r\n      const { images } = this.props;\r\n  \r\n      if (images) {\r\n        imageListContent = (\r\n          <GridList cols={3}>\r\n            {images.map(img => (\r\n              <GridListTile key={img.id}>\r\n              <img src={img.largeImageURL} alt={img.tags} className=\"imgLarge\" />\r\n              <GridListTileBar\r\n                title={img.tags}\r\n                subtitle={<span>by: {img.user}</span>}\r\n                actionIcon={\r\n                  <IconButton onClick={() => this.handleOpen(img.largeImageURL)} aria-label={`info about ${img.tags}`} >\r\n                    <ZoomInIcon className=\"zoomin\" color=\"white\" />                                    \r\n                  </IconButton> \r\n                  \r\n                }\r\n              />\r\n            </GridListTile>\r\n            ))}\r\n          </GridList>\r\n        );\r\n      } else {\r\n        imageListContent = null;\r\n      }\r\n  \r\n     // const actions = [\r\n        //<IconButton aria-label=\"Close\" onClick={this.handleClose} className=\"closeBtn\">\r\n        //<CloseIcon />\r\n        //</IconButton>\r\n      //];\r\n  \r\n      return (\r\n        <div>\r\n          {imageListContent}\r\n          <Dialog \r\n            onClose={this.handleClose}\r\n            modal={false}\r\n            open={this.state.open} \r\n            >\r\n            <DialogTitle id=\"simple-dialog-title\" onClick={this.handleClose} className=\"closeIcon\"><i class=\"fas fa-times closeBtn\"></i></DialogTitle>    \r\n      \r\n            <img src={this.state.currentImg} alt=\"\" style={{ width: '100%' }} />\r\n          </Dialog>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  ImageResults.propTypes = {\r\n    images: PropTypes.array.isRequired\r\n  };\r\n  \r\n  export default ImageResults;","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-results/ImageResults';\r\n\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        searchText: '',\r\n        amount: 10,\r\n        apiUrl: 'https://pixabay.com/api',\r\n        apiKey: '10377222-0f40dccc23fe8d67ffa15eacb',\r\n        images: []\r\n      };\r\n    }\r\n\r\n      onTextChange = e => {\r\n        const val = e.target.value;\r\n        this.setState({ [e.target.name]: val }, () => {\r\n          if (val === '') {\r\n            this.setState({ images: [] });\r\n          } else {\r\n            axios\r\n              .get(\r\n                `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${\r\n                  this.state.searchText\r\n                }&image_type=photo&per_page=${this.state.amount}&safesearch=true`\r\n              )\r\n              .then(res => this.setState({ images: res.data.hits }))\r\n              .catch(err => console.log(err));\r\n          }\r\n        });\r\n      };\r\n    \r\n      onAmountChange = e => {\r\n        const value = e.target.value;\r\n        this.setState({ amount: value });\r\n      }\r\n      render() {\r\n      \r\n        const styleInput={marginTop:'1rem', marginLeft:'0.5rem'};\r\n       \r\n        console.log(this.state.images);\r\n        return (\r\n          <div>\r\n            <TextField\r\n              name=\"searchText\"\r\n              value={this.state.searchText}\r\n              onChange={this.onTextChange}\r\n              label=\"Search For Images\"\r\n              fullWidth={true}\r\n            />\r\n            <br />        \r\n            <FormControl style={styleInput}>\r\n              <Select             \r\n              name=\"amount\"\r\n              value={this.state.amount}\r\n              onChange={this.onAmountChange}\r\n               >\r\n              <MenuItem value={5}>5</MenuItem>\r\n              <MenuItem value={10}>10</MenuItem>\r\n              <MenuItem value={20}>20</MenuItem>\r\n              <MenuItem value={30}>30</MenuItem>\r\n              <MenuItem value={50}>50</MenuItem>\r\n\r\n            </Select>\r\n            <FormHelperText>Amount</FormHelperText>\r\n            </FormControl>\r\n          \r\n            <br />\r\n            \r\n            {this.state.images.length > 0 ? (\r\n              <ImageResults images={this.state.images} />\r\n            ) : null}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    \r\n    export default Search;","import React from 'react';\nimport './App.css';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\n\nconst theme = createMuiTheme({\n  /* theme for v1.x */\n });\n\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n    <div>\n <NavBar />\n <Search />\n  </div>\n  </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}